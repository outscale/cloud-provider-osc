// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/outscale/cloud-provider-osc/cloud-controller-manager/osc/oapi (interfaces: LBU)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=./cloud-controller-manager/osc/oapi/mocks/mock_aws.go github.com/outscale/cloud-provider-osc/cloud-controller-manager/osc/oapi LBU
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	request "github.com/aws/aws-sdk-go/aws/request"
	elb "github.com/aws/aws-sdk-go/service/elb"
	gomock "go.uber.org/mock/gomock"
)

// MockLBU is a mock of LBU interface.
type MockLBU struct {
	ctrl     *gomock.Controller
	recorder *MockLBUMockRecorder
	isgomock struct{}
}

// MockLBUMockRecorder is the mock recorder for MockLBU.
type MockLBUMockRecorder struct {
	mock *MockLBU
}

// NewMockLBU creates a new mock instance.
func NewMockLBU(ctrl *gomock.Controller) *MockLBU {
	mock := &MockLBU{ctrl: ctrl}
	mock.recorder = &MockLBUMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLBU) EXPECT() *MockLBUMockRecorder {
	return m.recorder
}

// CreateLoadBalancerPolicyWithContext mocks base method.
func (m *MockLBU) CreateLoadBalancerPolicyWithContext(ctx context.Context, req *elb.CreateLoadBalancerPolicyInput, opts ...request.Option) (*elb.CreateLoadBalancerPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLoadBalancerPolicyWithContext", varargs...)
	ret0, _ := ret[0].(*elb.CreateLoadBalancerPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoadBalancerPolicyWithContext indicates an expected call of CreateLoadBalancerPolicyWithContext.
func (mr *MockLBUMockRecorder) CreateLoadBalancerPolicyWithContext(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoadBalancerPolicyWithContext", reflect.TypeOf((*MockLBU)(nil).CreateLoadBalancerPolicyWithContext), varargs...)
}

// DescribeLoadBalancerAttributesWithContext mocks base method.
func (m *MockLBU) DescribeLoadBalancerAttributesWithContext(ctx context.Context, req *elb.DescribeLoadBalancerAttributesInput, opts ...request.Option) (*elb.DescribeLoadBalancerAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeLoadBalancerAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*elb.DescribeLoadBalancerAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLoadBalancerAttributesWithContext indicates an expected call of DescribeLoadBalancerAttributesWithContext.
func (mr *MockLBUMockRecorder) DescribeLoadBalancerAttributesWithContext(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLoadBalancerAttributesWithContext", reflect.TypeOf((*MockLBU)(nil).DescribeLoadBalancerAttributesWithContext), varargs...)
}

// DescribeLoadBalancersWithContext mocks base method.
func (m *MockLBU) DescribeLoadBalancersWithContext(ctx context.Context, req *elb.DescribeLoadBalancersInput, opts ...request.Option) (*elb.DescribeLoadBalancersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeLoadBalancersWithContext", varargs...)
	ret0, _ := ret[0].(*elb.DescribeLoadBalancersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLoadBalancersWithContext indicates an expected call of DescribeLoadBalancersWithContext.
func (mr *MockLBUMockRecorder) DescribeLoadBalancersWithContext(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLoadBalancersWithContext", reflect.TypeOf((*MockLBU)(nil).DescribeLoadBalancersWithContext), varargs...)
}

// ModifyLoadBalancerAttributesWithContext mocks base method.
func (m *MockLBU) ModifyLoadBalancerAttributesWithContext(ctx context.Context, req *elb.ModifyLoadBalancerAttributesInput, opts ...request.Option) (*elb.ModifyLoadBalancerAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyLoadBalancerAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*elb.ModifyLoadBalancerAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyLoadBalancerAttributesWithContext indicates an expected call of ModifyLoadBalancerAttributesWithContext.
func (mr *MockLBUMockRecorder) ModifyLoadBalancerAttributesWithContext(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyLoadBalancerAttributesWithContext", reflect.TypeOf((*MockLBU)(nil).ModifyLoadBalancerAttributesWithContext), varargs...)
}

// SetLoadBalancerPoliciesForBackendServerWithContext mocks base method.
func (m *MockLBU) SetLoadBalancerPoliciesForBackendServerWithContext(ctx context.Context, req *elb.SetLoadBalancerPoliciesForBackendServerInput, opts ...request.Option) (*elb.SetLoadBalancerPoliciesForBackendServerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetLoadBalancerPoliciesForBackendServerWithContext", varargs...)
	ret0, _ := ret[0].(*elb.SetLoadBalancerPoliciesForBackendServerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetLoadBalancerPoliciesForBackendServerWithContext indicates an expected call of SetLoadBalancerPoliciesForBackendServerWithContext.
func (mr *MockLBUMockRecorder) SetLoadBalancerPoliciesForBackendServerWithContext(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLoadBalancerPoliciesForBackendServerWithContext", reflect.TypeOf((*MockLBU)(nil).SetLoadBalancerPoliciesForBackendServerWithContext), varargs...)
}
