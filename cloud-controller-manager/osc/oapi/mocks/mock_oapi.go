// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/outscale/cloud-provider-osc/cloud-controller-manager/osc/oapi (interfaces: OAPI)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=./cloud-controller-manager/osc/oapi/mocks/mock_oapi.go github.com/outscale/cloud-provider-osc/cloud-controller-manager/osc/oapi OAPI
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	osc "github.com/outscale/osc-sdk-go/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockOAPI is a mock of OAPI interface.
type MockOAPI struct {
	ctrl     *gomock.Controller
	recorder *MockOAPIMockRecorder
	isgomock struct{}
}

// MockOAPIMockRecorder is the mock recorder for MockOAPI.
type MockOAPIMockRecorder struct {
	mock *MockOAPI
}

// NewMockOAPI creates a new mock instance.
func NewMockOAPI(ctrl *gomock.Controller) *MockOAPI {
	mock := &MockOAPI{ctrl: ctrl}
	mock.recorder = &MockOAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOAPI) EXPECT() *MockOAPIMockRecorder {
	return m.recorder
}

// CreateLoadBalancer mocks base method.
func (m *MockOAPI) CreateLoadBalancer(ctx context.Context, req osc.CreateLoadBalancerRequest) (*osc.LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoadBalancer", ctx, req)
	ret0, _ := ret[0].(*osc.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoadBalancer indicates an expected call of CreateLoadBalancer.
func (mr *MockOAPIMockRecorder) CreateLoadBalancer(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoadBalancer", reflect.TypeOf((*MockOAPI)(nil).CreateLoadBalancer), ctx, req)
}

// CreateLoadBalancerListeners mocks base method.
func (m *MockOAPI) CreateLoadBalancerListeners(ctx context.Context, req osc.CreateLoadBalancerListenersRequest) (*osc.LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoadBalancerListeners", ctx, req)
	ret0, _ := ret[0].(*osc.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoadBalancerListeners indicates an expected call of CreateLoadBalancerListeners.
func (mr *MockOAPIMockRecorder) CreateLoadBalancerListeners(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoadBalancerListeners", reflect.TypeOf((*MockOAPI)(nil).CreateLoadBalancerListeners), ctx, req)
}

// CreateSecurityGroup mocks base method.
func (m *MockOAPI) CreateSecurityGroup(ctx context.Context, req osc.CreateSecurityGroupRequest) (*osc.SecurityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecurityGroup", ctx, req)
	ret0, _ := ret[0].(*osc.SecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecurityGroup indicates an expected call of CreateSecurityGroup.
func (mr *MockOAPIMockRecorder) CreateSecurityGroup(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityGroup", reflect.TypeOf((*MockOAPI)(nil).CreateSecurityGroup), ctx, req)
}

// CreateSecurityGroupRule mocks base method.
func (m *MockOAPI) CreateSecurityGroupRule(ctx context.Context, req osc.CreateSecurityGroupRuleRequest) (*osc.SecurityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecurityGroupRule", ctx, req)
	ret0, _ := ret[0].(*osc.SecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecurityGroupRule indicates an expected call of CreateSecurityGroupRule.
func (mr *MockOAPIMockRecorder) CreateSecurityGroupRule(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityGroupRule", reflect.TypeOf((*MockOAPI)(nil).CreateSecurityGroupRule), ctx, req)
}

// CreateTags mocks base method.
func (m *MockOAPI) CreateTags(ctx context.Context, req osc.CreateTagsRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTags", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTags indicates an expected call of CreateTags.
func (mr *MockOAPIMockRecorder) CreateTags(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTags", reflect.TypeOf((*MockOAPI)(nil).CreateTags), ctx, req)
}

// DeleteLoadBalancer mocks base method.
func (m *MockOAPI) DeleteLoadBalancer(ctx context.Context, req osc.DeleteLoadBalancerRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLoadBalancer", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLoadBalancer indicates an expected call of DeleteLoadBalancer.
func (mr *MockOAPIMockRecorder) DeleteLoadBalancer(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadBalancer", reflect.TypeOf((*MockOAPI)(nil).DeleteLoadBalancer), ctx, req)
}

// DeleteLoadBalancerListeners mocks base method.
func (m *MockOAPI) DeleteLoadBalancerListeners(ctx context.Context, req osc.DeleteLoadBalancerListenersRequest) (*osc.LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLoadBalancerListeners", ctx, req)
	ret0, _ := ret[0].(*osc.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLoadBalancerListeners indicates an expected call of DeleteLoadBalancerListeners.
func (mr *MockOAPIMockRecorder) DeleteLoadBalancerListeners(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadBalancerListeners", reflect.TypeOf((*MockOAPI)(nil).DeleteLoadBalancerListeners), ctx, req)
}

// DeleteSecurityGroup mocks base method.
func (m *MockOAPI) DeleteSecurityGroup(ctx context.Context, req osc.DeleteSecurityGroupRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecurityGroup", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecurityGroup indicates an expected call of DeleteSecurityGroup.
func (mr *MockOAPIMockRecorder) DeleteSecurityGroup(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecurityGroup", reflect.TypeOf((*MockOAPI)(nil).DeleteSecurityGroup), ctx, req)
}

// DeleteSecurityGroupRule mocks base method.
func (m *MockOAPI) DeleteSecurityGroupRule(ctx context.Context, req osc.DeleteSecurityGroupRuleRequest) (*osc.SecurityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecurityGroupRule", ctx, req)
	ret0, _ := ret[0].(*osc.SecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSecurityGroupRule indicates an expected call of DeleteSecurityGroupRule.
func (mr *MockOAPIMockRecorder) DeleteSecurityGroupRule(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecurityGroupRule", reflect.TypeOf((*MockOAPI)(nil).DeleteSecurityGroupRule), ctx, req)
}

// DeregisterVmsInLoadBalancer mocks base method.
func (m *MockOAPI) DeregisterVmsInLoadBalancer(ctx context.Context, req osc.DeregisterVmsInLoadBalancerRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterVmsInLoadBalancer", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeregisterVmsInLoadBalancer indicates an expected call of DeregisterVmsInLoadBalancer.
func (mr *MockOAPIMockRecorder) DeregisterVmsInLoadBalancer(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterVmsInLoadBalancer", reflect.TypeOf((*MockOAPI)(nil).DeregisterVmsInLoadBalancer), ctx, req)
}

// ListPublicIpsFromPool mocks base method.
func (m *MockOAPI) ListPublicIpsFromPool(ctx context.Context, pool string) ([]osc.PublicIp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPublicIpsFromPool", ctx, pool)
	ret0, _ := ret[0].([]osc.PublicIp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPublicIpsFromPool indicates an expected call of ListPublicIpsFromPool.
func (mr *MockOAPIMockRecorder) ListPublicIpsFromPool(ctx, pool any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPublicIpsFromPool", reflect.TypeOf((*MockOAPI)(nil).ListPublicIpsFromPool), ctx, pool)
}

// ReadLoadBalancers mocks base method.
func (m *MockOAPI) ReadLoadBalancers(ctx context.Context, req osc.ReadLoadBalancersRequest) ([]osc.LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadLoadBalancers", ctx, req)
	ret0, _ := ret[0].([]osc.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadLoadBalancers indicates an expected call of ReadLoadBalancers.
func (mr *MockOAPIMockRecorder) ReadLoadBalancers(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLoadBalancers", reflect.TypeOf((*MockOAPI)(nil).ReadLoadBalancers), ctx, req)
}

// ReadSecurityGroups mocks base method.
func (m *MockOAPI) ReadSecurityGroups(ctx context.Context, req osc.ReadSecurityGroupsRequest) ([]osc.SecurityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSecurityGroups", ctx, req)
	ret0, _ := ret[0].([]osc.SecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadSecurityGroups indicates an expected call of ReadSecurityGroups.
func (mr *MockOAPIMockRecorder) ReadSecurityGroups(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSecurityGroups", reflect.TypeOf((*MockOAPI)(nil).ReadSecurityGroups), ctx, req)
}

// ReadSubnets mocks base method.
func (m *MockOAPI) ReadSubnets(ctx context.Context, req osc.ReadSubnetsRequest) ([]osc.Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSubnets", ctx, req)
	ret0, _ := ret[0].([]osc.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadSubnets indicates an expected call of ReadSubnets.
func (mr *MockOAPIMockRecorder) ReadSubnets(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSubnets", reflect.TypeOf((*MockOAPI)(nil).ReadSubnets), ctx, req)
}

// ReadVms mocks base method.
func (m *MockOAPI) ReadVms(ctx context.Context, req osc.ReadVmsRequest) ([]osc.Vm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadVms", ctx, req)
	ret0, _ := ret[0].([]osc.Vm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadVms indicates an expected call of ReadVms.
func (mr *MockOAPIMockRecorder) ReadVms(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadVms", reflect.TypeOf((*MockOAPI)(nil).ReadVms), ctx, req)
}

// RegisterVmsInLoadBalancer mocks base method.
func (m *MockOAPI) RegisterVmsInLoadBalancer(ctx context.Context, req osc.RegisterVmsInLoadBalancerRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterVmsInLoadBalancer", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterVmsInLoadBalancer indicates an expected call of RegisterVmsInLoadBalancer.
func (mr *MockOAPIMockRecorder) RegisterVmsInLoadBalancer(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterVmsInLoadBalancer", reflect.TypeOf((*MockOAPI)(nil).RegisterVmsInLoadBalancer), ctx, req)
}

// UpdateLoadBalancer mocks base method.
func (m *MockOAPI) UpdateLoadBalancer(ctx context.Context, req osc.UpdateLoadBalancerRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoadBalancer", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLoadBalancer indicates an expected call of UpdateLoadBalancer.
func (mr *MockOAPIMockRecorder) UpdateLoadBalancer(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoadBalancer", reflect.TypeOf((*MockOAPI)(nil).UpdateLoadBalancer), ctx, req)
}
