// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/outscale/cloud-provider-osc/cloud-controller-manager/osc/oapi (interfaces: OAPI)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=./cloud-controller-manager/osc/oapi/mocks/mock_oapi.go github.com/outscale/cloud-provider-osc/cloud-controller-manager/osc/oapi OAPI
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	osc "github.com/outscale/osc-sdk-go/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockOAPI is a mock of OAPI interface.
type MockOAPI struct {
	ctrl     *gomock.Controller
	recorder *MockOAPIMockRecorder
	isgomock struct{}
}

// MockOAPIMockRecorder is the mock recorder for MockOAPI.
type MockOAPIMockRecorder struct {
	mock *MockOAPI
}

// NewMockOAPI creates a new mock instance.
func NewMockOAPI(ctrl *gomock.Controller) *MockOAPI {
	mock := &MockOAPI{ctrl: ctrl}
	mock.recorder = &MockOAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOAPI) EXPECT() *MockOAPIMockRecorder {
	return m.recorder
}

// CreateRoute mocks base method.
func (m *MockOAPI) CreateRoute(ctx context.Context, req osc.CreateRouteRequest) (*osc.RouteTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoute", ctx, req)
	ret0, _ := ret[0].(*osc.RouteTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoute indicates an expected call of CreateRoute.
func (mr *MockOAPIMockRecorder) CreateRoute(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoute", reflect.TypeOf((*MockOAPI)(nil).CreateRoute), ctx, req)
}

// CreateSecurityGroup mocks base method.
func (m *MockOAPI) CreateSecurityGroup(ctx context.Context, req osc.CreateSecurityGroupRequest) (*osc.SecurityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecurityGroup", ctx, req)
	ret0, _ := ret[0].(*osc.SecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecurityGroup indicates an expected call of CreateSecurityGroup.
func (mr *MockOAPIMockRecorder) CreateSecurityGroup(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityGroup", reflect.TypeOf((*MockOAPI)(nil).CreateSecurityGroup), ctx, req)
}

// CreateSecurityGroupRule mocks base method.
func (m *MockOAPI) CreateSecurityGroupRule(ctx context.Context, req osc.CreateSecurityGroupRuleRequest) (*osc.SecurityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecurityGroupRule", ctx, req)
	ret0, _ := ret[0].(*osc.SecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecurityGroupRule indicates an expected call of CreateSecurityGroupRule.
func (mr *MockOAPIMockRecorder) CreateSecurityGroupRule(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityGroupRule", reflect.TypeOf((*MockOAPI)(nil).CreateSecurityGroupRule), ctx, req)
}

// CreateTags mocks base method.
func (m *MockOAPI) CreateTags(ctx context.Context, req osc.CreateTagsRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTags", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTags indicates an expected call of CreateTags.
func (mr *MockOAPIMockRecorder) CreateTags(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTags", reflect.TypeOf((*MockOAPI)(nil).CreateTags), ctx, req)
}

// DeleteRoute mocks base method.
func (m *MockOAPI) DeleteRoute(ctx context.Context, req osc.DeleteRouteRequest) (*osc.RouteTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoute", ctx, req)
	ret0, _ := ret[0].(*osc.RouteTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRoute indicates an expected call of DeleteRoute.
func (mr *MockOAPIMockRecorder) DeleteRoute(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoute", reflect.TypeOf((*MockOAPI)(nil).DeleteRoute), ctx, req)
}

// DeleteSecurityGroup mocks base method.
func (m *MockOAPI) DeleteSecurityGroup(ctx context.Context, req osc.DeleteSecurityGroupRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecurityGroup", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecurityGroup indicates an expected call of DeleteSecurityGroup.
func (mr *MockOAPIMockRecorder) DeleteSecurityGroup(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecurityGroup", reflect.TypeOf((*MockOAPI)(nil).DeleteSecurityGroup), ctx, req)
}

// DeleteSecurityGroupRule mocks base method.
func (m *MockOAPI) DeleteSecurityGroupRule(ctx context.Context, req osc.DeleteSecurityGroupRuleRequest) (*osc.SecurityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecurityGroupRule", ctx, req)
	ret0, _ := ret[0].(*osc.SecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSecurityGroupRule indicates an expected call of DeleteSecurityGroupRule.
func (mr *MockOAPIMockRecorder) DeleteSecurityGroupRule(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecurityGroupRule", reflect.TypeOf((*MockOAPI)(nil).DeleteSecurityGroupRule), ctx, req)
}

// ReadRouteTables mocks base method.
func (m *MockOAPI) ReadRouteTables(ctx context.Context, req osc.ReadRouteTablesRequest) ([]osc.RouteTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadRouteTables", ctx, req)
	ret0, _ := ret[0].([]osc.RouteTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadRouteTables indicates an expected call of ReadRouteTables.
func (mr *MockOAPIMockRecorder) ReadRouteTables(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadRouteTables", reflect.TypeOf((*MockOAPI)(nil).ReadRouteTables), ctx, req)
}

// ReadSecurityGroups mocks base method.
func (m *MockOAPI) ReadSecurityGroups(ctx context.Context, req osc.ReadSecurityGroupsRequest) ([]osc.SecurityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSecurityGroups", ctx, req)
	ret0, _ := ret[0].([]osc.SecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadSecurityGroups indicates an expected call of ReadSecurityGroups.
func (mr *MockOAPIMockRecorder) ReadSecurityGroups(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSecurityGroups", reflect.TypeOf((*MockOAPI)(nil).ReadSecurityGroups), ctx, req)
}

// ReadSubnets mocks base method.
func (m *MockOAPI) ReadSubnets(ctx context.Context, req osc.ReadSubnetsRequest) ([]osc.Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSubnets", ctx, req)
	ret0, _ := ret[0].([]osc.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadSubnets indicates an expected call of ReadSubnets.
func (mr *MockOAPIMockRecorder) ReadSubnets(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSubnets", reflect.TypeOf((*MockOAPI)(nil).ReadSubnets), ctx, req)
}

// ReadVms mocks base method.
func (m *MockOAPI) ReadVms(ctx context.Context, req osc.ReadVmsRequest) ([]osc.Vm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadVms", ctx, req)
	ret0, _ := ret[0].([]osc.Vm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadVms indicates an expected call of ReadVms.
func (mr *MockOAPIMockRecorder) ReadVms(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadVms", reflect.TypeOf((*MockOAPI)(nil).ReadVms), ctx, req)
}

// UpdateVM mocks base method.
func (m *MockOAPI) UpdateVM(ctx context.Context, req osc.UpdateVmRequest) (*osc.Vm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVM", ctx, req)
	ret0, _ := ret[0].(*osc.Vm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVM indicates an expected call of UpdateVM.
func (mr *MockOAPIMockRecorder) UpdateVM(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVM", reflect.TypeOf((*MockOAPI)(nil).UpdateVM), ctx, req)
}
